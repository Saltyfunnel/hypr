#!/bin/bash
set -euo pipefail

# ===============================
# Variables
# ===============================
USER_NAME="${SUDO_USER:-$USER}"
USER_HOME=$(eval echo "~$USER_NAME")

CONFIG_DIR="$USER_HOME/.config"
WALLPAPERS_DIR="$CONFIG_DIR/assets/wallpapers"
TOFI_CONFIG="$CONFIG_DIR/tofi/configA"
KITTY_CONFIG="$CONFIG_DIR/kitty/colors.conf"
STARSHIP_CONFIG="$CONFIG_DIR/starship.toml"

# ===============================
# Helper functions
# ===============================
print_info()    { echo -e "\033[0;34m[I]\033[0m $1"; }
print_success() { echo -e "\033[0;32m[S]\033[0m $1"; }
print_warning() { echo -e "\033[0;33m[W]\033[0m $1"; }
print_error()   { echo -e "\033[0;31m[E]\033[0m $1"; }

run_as_user() {
    sudo -u "$USER_NAME" bash -c "$1"
}

# ===============================
# Step 1: Select wallpaper
# ===============================
print_info "Selecting wallpaper via Tofi..."
WALL_NAME=$(ls "$WALLPAPERS_DIR" | tofi -c "$TOFI_CONFIG" --prompt-text "Select Wallpaper:")

if [[ -z "$WALL_NAME" ]]; then
    print_error "No wallpaper selected. Exiting."
    exit 1
fi

WALL_PATH="$WALLPAPERS_DIR/$WALL_NAME"
print_success "Selected wallpaper: $WALL_PATH"

# ===============================
# Step 2: Set wallpaper via swww
# ===============================
print_info "Setting wallpaper via swww..."
swww img "$WALL_PATH" --transition-fps 255 --transition-type outer --transition-duration 0.8
print_success "Wallpaper applied."

# ===============================
# Step 3: Generate Pywal palette
# ===============================
print_info "Generating Pywal colors..."
wal -i "$WALL_PATH" --backend wal
print_success "Pywal colors applied."

# ===============================
# Step 4: Update Kitty config
# ===============================
if [[ -f "$KITTY_CONFIG" ]]; then
    print_info "Updating Kitty config with Pywal colors..."
    WAL_COLORS="$USER_HOME/.cache/wal/colors.sh"

    if [[ -f "$WAL_COLORS" ]]; then
        awk -F= '/^color/ {gsub(/"/,"",$2); printf "color%s %s\n", substr($1,6), $2}' "$WAL_COLORS" > "$KITTY_CONFIG"
        chown "$USER_NAME:$USER_NAME" "$KITTY_CONFIG"
        print_success "Kitty config updated with Pywal colors."
    else
        print_warning "Pywal colors.sh not found. Kitty will not be themed."
    fi
fi

# ===============================
# Step 5: Update Tofi config
# ===============================
if [[ -f "$TOFI_CONFIG" ]]; then
    print_info "Updating Tofi config with Pywal colors..."
    WAL_CSS="$USER_HOME/.cache/wal/colors.css"

    BACKGROUND=$(awk -F: '/background/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CSS" | head -1)
    FOREGROUND=$(awk -F: '/foreground/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CSS" | head -1)
    COLOR_ACCENT=$(awk -F: '/color1/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CSS" | head -1)

    BACKGROUND=${BACKGROUND:-"#1a1a1acc"}
    FOREGROUND=${FOREGROUND:-"#f0f0f0"}
    COLOR_ACCENT=${COLOR_ACCENT:-"#7d7c7cff"}

    sed -i \
        -e "s|^background-color = .*|background-color = $BACKGROUND|" \
        -e "s|^text-color = .*|text-color = $FOREGROUND|" \
        -e "s|^selection-color = .*|selection-color = $COLOR_ACCENT|" \
        "$TOFI_CONFIG"
    print_success "Tofi config updated with Pywal colors."
else
    print_warning "Tofi config not found at $TOFI_CONFIG."
fi

# ===============================
# Step 6: Update Starship prompt
# ===============================
print_info "Updating Starship prompt with Pywal colors..."
COLOR_BG="$BACKGROUND"
COLOR_FG="$FOREGROUND"
COLOR_ACCENT="$COLOR_ACCENT"

cat > "$STARSHIP_CONFIG" <<EOF
# Auto-generated by select-wallpaper.sh

[character]
symbol = "❯"
style = "fg=$COLOR_ACCENT"

[username]
style_user = "fg=$COLOR_ACCENT"

[directory]
style = "fg=$COLOR_FG"

[git_status]
style = "fg=$COLOR_ACCENT"

[time]
style = "fg=$COLOR_FG"
EOF

chown "$USER_NAME:$USER_NAME" "$STARSHIP_CONFIG"
print_success "Starship configured with Pywal colors."

# ===============================
# Step 7: Launch or refresh Yazi (optional)
# ===============================
print_info "Launching or refreshing Yazi..."
if command -v yazi &>/dev/null; then
    if ! pgrep -x yazi >/dev/null; then
        run_as_user "env DISPLAY=$DISPLAY XDG_SESSION_TYPE=$XDG_SESSION_TYPE setsid yazi >/dev/null 2>&1 &"
        print_success "Yazi launched."
    else
        print_info "Yazi is already running and should auto-refresh colors from Pywal."
    fi
else
    print_warning "Yazi not installed. Install via AUR to enable dynamic Qt file manager theming."
fi

print_success "Wallpaper selection and theming complete!"
