#!/bin/bash
set -euo pipefail

# ===============================
# Variables
# ===============================
USER_NAME="${SUDO_USER:-$USER}"
USER_HOME=$(eval echo "~$USER_NAME")

CONFIG_DIR="$USER_HOME/.config"
WALLPAPERS_DIR="$CONFIG_DIR/assets/wallpapers"
STARSHIP_CONFIG="$CONFIG_DIR/starship.toml"
DUNSTRC="$CONFIG_DIR/dunst/dunstrc"
WAL_CACHE="$USER_HOME/.cache/wal/colors.css"

# ===============================
# Helper functions
# ===============================
print_info()    { echo -e "\033[0;34m[I]\033[0m $1"; }
print_success() { echo -e "\033[0;32m[S]\033[0m $1"; }
print_warning() { echo -e "\033[0;33m[W]\033[0m $1"; }
print_error()   { echo -e "\033[0;31m[E]\033[0m $1"; }

run_as_user() {
    sudo -u "$USER_NAME" bash -c "$1"
}

# ===============================
# Step 1: Select wallpaper
# ===============================
print_info "Selecting wallpaper..."
WALL_NAME=$(ls "$WALLPAPERS_DIR" | wofi --prompt "Select Wallpaper:" --dmenu)

if [[ -z "$WALL_NAME" ]]; then
    print_error "No wallpaper selected. Exiting."
    exit 1
fi

WALL_PATH="$WALLPAPERS_DIR/$WALL_NAME"
print_success "Selected wallpaper: $WALL_PATH"

# ===============================
# Step 2: Set wallpaper via swww
# ===============================
print_info "Applying wallpaper..."
swww img "$WALL_PATH" --transition-fps 255 --transition-type outer --transition-duration 0.8
print_success "Wallpaper applied."

# ===============================
# Step 3: Generate Pywal palette
# ===============================
print_info "Generating Pywal colors..."
wal -i "$WALL_PATH" --backend wal
print_success "Pywal colors applied."

# ===============================
# Step 4: Update Starship
# ===============================
print_info "Updating Starship prompt..."
COLOR_BG=$(awk -F: '/background/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE" | head -1)
COLOR_FG=$(awk -F: '/foreground/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE" | head -1)
COLOR_ACCENT=$(awk -F: '/color1/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE" | head -1)

cat > "$STARSHIP_CONFIG" <<EOF
# Auto-generated by select-wallpaper.sh

[character]
symbol = "❯"
style = "fg=$COLOR_ACCENT"

[username]
style = "fg=$COLOR_ACCENT"

[hostname]
style = "fg=$COLOR_ACCENT"

[directory]
style = "fg=$COLOR_FG"

[git_status]
style = "fg=$COLOR_ACCENT"

[job_summary]
style = "fg=$COLOR_ACCENT"

[package]
style = "fg=$COLOR_ACCENT"

[time]
style = "fg=$COLOR_FG"
EOF

chown "$USER_NAME:$USER_NAME" "$STARSHIP_CONFIG"
print_success "Starship configured."

# ===============================
# Step 5: Update Dunst
# ===============================
print_info "Updating Dunst notifications..."
if [[ -f "$DUNSTRC" ]]; then
    sed -i -e "s/^frame_color = .*/frame_color = \"$COLOR_ACCENT\"/" \
           -e "s/^foreground = .*/foreground = \"$COLOR_FG\"/" \
           -e "s/^background = .*/background = \"$COLOR_BG\"/" \
           "$DUNSTRC"

    pkill dunst && dunst &
    print_success "Dunst colors updated."
else
    print_warning "Dunst config not found at $DUNSTRC"
fi

# ===============================
# Step 6: Launch or refresh Yazi
# ===============================
print_info "Launching or refreshing Yazi..."
if command -v yazi &>/dev/null; then
    if ! pgrep -x yazi >/dev/null; then
        run_as_user "env DISPLAY=$DISPLAY XDG_SESSION_TYPE=$XDG_SESSION_TYPE setsid yazi >/dev/null 2>&1 &"
        print_success "Yazi launched."
    else
        print_info "Yazi already running (should auto-refresh colors)."
    fi
else
    print_warning "Yazi not installed."
fi

print_success "Wallpaper selection and theming complete!"
