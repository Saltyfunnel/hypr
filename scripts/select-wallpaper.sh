#!/bin/bash
set -euo pipefail

# ===============================
# Variables
# ===============================
USER_NAME="${SUDO_USER:-$USER}"
USER_HOME=$(eval echo "~$USER_NAME")

CONFIG_DIR="$USER_HOME/.config"
WALLPAPERS_DIR="$CONFIG_DIR/assets/wallpapers"
WOFI_CSS="$CONFIG_DIR/wofi/style.css"  # Wofi CSS
STARSHIP_CONFIG="$CONFIG_DIR/starship.toml"

# ===============================
# Helper functions
# ===============================
print_info()    { echo -e "\033[0;34m[I]\033[0m $1"; }
print_success() { echo -e "\033[0;32m[S]\033[0m $1"; }
print_warning() { echo -e "\033[0;33m[W]\033[0m $1"; }
print_error()   { echo -e "\033[0;31m[E]\033[0m $1"; }

run_as_user() {
    sudo -u "$USER_NAME" bash -c "$1"
}

hex_to_rgb() {
    local hex=${1#"#"}
    echo "$((16#${hex:0:2})) $((16#${hex:2:2})) $((16#${hex:4:2}))"
}

# ===============================
# Step 1: Select wallpaper
# ===============================
print_info "Selecting wallpaper via Wofi..."
WALL_NAME=$(ls "$WALLPAPERS_DIR" | wofi --prompt "Select Wallpaper:" --dmenu)

if [[ -z "$WALL_NAME" ]]; then
    print_error "No wallpaper selected. Exiting."
    exit 1
fi

WALL_PATH="$WALLPAPERS_DIR/$WALL_NAME"
print_success "Selected wallpaper: $WALL_PATH"

# ===============================
# Step 2: Set wallpaper via swww
# ===============================
print_info "Setting wallpaper via swww..."
swww img "$WALL_PATH" --transition-fps 255 --transition-type outer --transition-duration 0.8
print_success "Wallpaper applied."

# ===============================
# Step 3: Generate Pywal palette
# ===============================
print_info "Generating Pywal colors..."
wal -i "$WALL_PATH" --backend wal
print_success "Pywal colors applied."

# ===============================
# Step 4: Update Starship prompt with Pywal colors
# ===============================
print_info "Updating Starship prompt..."
WAL_CACHE="$USER_HOME/.cache/wal/colors.css"

COLOR_BG=$(awk -F: '/background/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE" | head -1)
COLOR_FG=$(awk -F: '/foreground/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE" | head -1)
COLOR_ACCENT=$(awk -F: '/color1/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE" | head -1)

cat > "$STARSHIP_CONFIG" <<EOF
# Auto-generated by select-wallpaper.sh

[character]
symbol = "❯"
style = "fg=$COLOR_ACCENT"

[username]
style = "fg=$COLOR_ACCENT"

[hostname]
style = "fg=$COLOR_ACCENT"

[directory]
style = "fg=$COLOR_FG"

[git_status]
style = "fg=$COLOR_ACCENT"

[job_summary]
style = "fg=$COLOR_ACCENT"

[package]
style = "fg=$COLOR_ACCENT"

[time]
style = "fg=$COLOR_FG"
EOF

chown "$USER_NAME:$USER_NAME" "$STARSHIP_CONFIG"
print_success "Starship configured with Pywal colors."

# ===============================
# Step 5: Update Wofi CSS with semi-opaque background
# ===============================
if [[ -f "$WOFI_CSS" ]]; then
    print_info "Updating Wofi CSS with Pywal colors..."
    BG_HEX=$(awk -F: '/background/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE")
    FG_HEX=$(awk -F: '/foreground/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE")
    COLOR1_HEX=$(awk -F: '/color1/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE")
    COLOR0_HEX=$(awk -F: '/color0/ {gsub(/[ ;]/,"",$2); print $2}' "$WAL_CACHE")
    read BG_R BG_G BG_B <<< $(hex_to_rgb "$BG_HEX")

    cat > "$WOFI_CSS" <<EOF
/* ============================
   Wofi Style (Pywal Compatible)
   ============================ */

window {
    background-color: rgba($BG_R,$BG_G,$BG_B,0.95);
    border-radius: 8px;
    border: 2px solid $COLOR1_HEX;
    padding: 6px;
}

listview row:selected {
    background-color: $COLOR1_HEX;
    color: $FG_HEX;
}

listview row {
    background-color: rgba($BG_R,$BG_G,$BG_B,0.95);
    color: $FG_HEX;
}

entry {
    background-color: rgba($BG_R,$BG_G,$BG_B,0.85);
    color: $FG_HEX;
    border: 1px solid $COLOR1_HEX;
    border-radius: 4px;
    padding: 4px;
}

scrollbar {
    background-color: $COLOR0_HEX;
    width: 8px;
}

scrollbar slider {
    background-color: $COLOR1_HEX;
}
EOF

    print_success "Wofi CSS updated."
else
    print_warning "Wofi CSS not found at $WOFI_CSS."
fi

# ===============================
# Step 6: Launch or refresh Yazi
# ===============================
print_info "Launching or refreshing Yazi..."
if command -v yazi &>/dev/null; then
    if ! pgrep -x yazi >/dev/null; then
        run_as_user "env DISPLAY=$DISPLAY XDG_SESSION_TYPE=$XDG_SESSION_TYPE setsid yazi >/dev/null 2>&1 &"
        print_success "Yazi launched."
    else
        print_info "Yazi is already running and should auto-refresh colors."
    fi
else
    print_warning "Yazi not installed. Skipping."
fi

print_success "Wallpaper selection and theming complete!"
